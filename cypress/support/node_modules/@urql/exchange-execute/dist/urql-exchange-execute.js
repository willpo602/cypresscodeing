var e = require("wonka");

var r = require("graphql");

var n = require("@urql/core");

var t = "undefined" != typeof Symbol ? Symbol.asyncIterator : null;

exports.executeExchange = function executeExchange(u) {
  var a = u.schema;
  var o = u.rootValue;
  var i = u.context;
  var c = u.fieldResolver;
  var f = u.typeResolver;
  return function(u) {
    var l = u.forward;
    return function(u) {
      var v = e.share(u);
      var m = e.mergeMap((function(u) {
        var l = u.key;
        var m = e.filter((function(e) {
          return "teardown" === e.kind && e.key === l;
        }))(v);
        var x = "function" == typeof i ? i(u) : i;
        return e.takeUntil(m)(function makeExecuteSource(u, a) {
          return e.make((function(e) {
            var o = !1;
            Promise.resolve().then((function() {
              if (o) {
                return;
              }
              return r.execute.apply(void 0, a);
            })).then((function(r) {
              if (o || !r) {
                return;
              } else if (!t || !r[t]) {
                e.next(n.makeResult(u, r));
                return;
              }
              var a = r[t]();
              var i = null;
              return a.next().then((function next(r) {
                var t = r.done;
                var c = r.value;
                if (c) {
                  e.next(i = i ? n.mergeResultPatch(i, c) : n.makeResult(u, c));
                }
                if (!t && !o) {
                  return a.next().then(next);
                }
              }));
            })).then((function() {
              e.complete();
            })).catch((function(r) {
              e.next(n.makeErrorResult(u, r));
              e.complete();
            }));
            return function() {
              o = !0;
            };
          }));
        }(u, [ a, u.query, o, x, u.variables, n.getOperationName(u.query), c, f ]));
      }))(e.filter((function(e) {
        return "query" === e.kind || "mutation" === e.kind;
      }))(v));
      var x = l(e.filter((function(e) {
        return "teardown" === e.kind;
      }))(v));
      return e.merge([ m, x ]);
    };
  };
};
//# sourceMappingURL=urql-exchange-execute.js.map
